// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                    @unique @default(autoincrement())
  email                 String                 @unique
  password              String
  firstName             String
  lastName              String
  isPremium             Boolean                @default(false)
  role                  RoleEnum               @default(USER)
  hashRt                String?
  resetCode             String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  healthData            UserHealthData?
  userAim               UserAim?
  userJournal           UserJournal?
  UserFavoriteExercises UserFavoriteExercises?

  @@index([email, id], type: BTree)
}

model Audit {
  id        Int        @unique @default(autoincrement())
  action    ActionEnum
  text      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model UserHealthData {
  id          Int    @unique @default(autoincrement())
  dateOfBirth String
  age         Int
  BMI         Float
  gender      Gender
  weight      Float
  height      Float
  User        User   @relation(fields: [userId], references: [id])
  userId      Int    @unique
}

model UserAim {
  id     Int                   @unique @default(autoincrement())
  aim    UserAimEnum
  level  UserTrainingLevelEnum
  User   User                  @relation(fields: [userId], references: [id])
  userId Int                   @unique
}

model Exercise {
  id                    Int                     @unique @default(autoincrement())
  name                  String
  image                 String?
  video                 String?
  description           String
  instructions          String
  difficulty            DifficultyLevels
  groupOfMuscles        MuscleGroup
  repeats               Int?
  sets                  Int?
  duration              Int
  equipment             Boolean
  place                 Place
  rating                Float
  likes                 Int
  dislikes              Int
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  UserFavoriteExercises UserFavoriteExercises[]

  @@index([name, id], type: BTree)
}

// todo design journal
model UserJournal {
  id        Int      @unique @default(autoincrement())
  User      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  createdAt DateTime @default(now())
}

model UserFavoriteExercises {
  id         Int      @unique @default(autoincrement())
  User       User     @relation(fields: [userId], references: [id])
  userId     Int      @unique
  Exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId Int
}

enum UserAimEnum {
  GAIN
  LOSE
  MAINTAIN
  BALANCE
}

enum Gender {
  MALE
  FEMALE
}

enum UserTrainingLevelEnum {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  LIGHT_WEIGHT_BABY
}

enum MuscleGroup {
  CHEST
  BACK
  SHOULDERS
  BICEPS
  TRICEPS
  LEGS
  ABS
}

enum Place {
  HOME
  GYM
  OUTDOOR
}

enum DifficultyLevels {
  Easy
  Medium
  Hard
  Light_Weitgh_Baby
}

enum WorkType {
  WORKOUT
  REST
  CARDIO
  HIIT
  POWERLIFTING
  BODYBUILDING
  YOGA
}

enum RoleEnum {
  ADMIN
  USER
}

enum ActionEnum {
  CREATE
  UPDATE
  DELETE
  ERROR
  SUCCESS
}
